import System.IO
import Data.Char

-- Some basics
--
act :: IO (Char, Char)
act = do x <- getChar
         getChar
         y <- getChar
         return (x,y)

getLine' :: IO String
getLine' = do x <- getChar
              if x == '\n' then
                return []
              else
                do xs <- getLine'
                   return (x:xs)

strlen :: IO ()
strlen =
  do putStr "Enter a string: "
     xs <- getLine
     putStr "The string has "
     putStr (show (length xs))
     putStrLn " characters"

-- Extended examples below
--
-- Hangman

hangman :: IO ()
hangman = 
  do putStrLn "Think of a word: "
     word <- sgetLine
     putStrLn "Try to guess it: "
     play word

sgetLine :: IO String
sgetLine =
  do x <- getCh
     if x == '\n' then
        do putChar x
           return []
     else
        do putChar '-'
           xs <- sgetLine
           return (x:xs)

getCh :: IO Char
getCh = 
  do hSetEcho stdin False
     x <- getChar
     hSetEcho stdin True
     return x

play :: String -> IO ()
play word =
  do putStr "? "
     guess <- getLine
     if guess == word then
        putStrLn "You got it!!"
     else
        do putStrLn (match word guess)
           play word

match :: String -> String -> String
match xs ys = [if elem x ys then x else '-' | x <- xs]

-- Nim

next :: Int -> Int
next 1 = 2
next 2 = 1

type Board = [Int]

initial :: Int -> Board
initial n = [ n-m | m <-[0..(n-1)]]

finished :: Board -> Bool
finished = all (==0)

valid :: Board -> Int -> Int -> Bool
valid board row take = board!!(row-1) >= take

move :: Board -> Int -> Int -> Board
move board row take = [update r row take | r <- zip board [1..] ]
  where
    update (r1, r2) row take = if row == r2 then r1-take else r1

putRow :: Int -> Int -> IO ()
putRow row num = 
  do putStr (show row)
     putStr ": "
     putStrLn (concat (replicate num "*"))

-- Generalization of putBoard from the book
putBoard' :: Board -> Int -> IO ()
putBoard' (x:xs) row =
  do putRow row x
     if length xs == 0 then putStrLn "" else putBoard' xs (row+1)

putBoard :: Board -> IO ()
putBoard xs = putBoard' xs 1

newline :: IO ()
newline = putChar '\n'

getDigit :: String -> IO Int
getDigit prompt = 
  do putStr prompt
     x <- getChar
     newline
     if isDigit x then
        return (digitToInt x)
     else
        do putStrLn "ERROR: Invalid digit"
           getDigit prompt

playNim :: Board -> Int -> IO ()
playNim board player = 
  do newline
     putBoard board
     if finished board then
        do newline
           putStr "Player "
           putStr (show (next player))
           putStrLn " wins!"
     else
        do newline
           putStrLn "Player "
           putStrLn (show player)
           row <- getDigit "Enter a row number: "
           num <- getDigit "Stars to remove: "
           if valid board row num then
              playNim (move board row num) (next player)
           else
              do newline
                 putStrLn "Error: Invalid move"
                 playNim board player

-- Life

cls :: IO ()
cls = putStr "\ESC[2J"

type Pos = (Int,Int)

writeat :: Pos -> String -> IO ()
writeat p xs =
  do goto p
     putStr xs

goto :: Pos -> IO ()
goto (x,y) = putStr("\ESC[" ++ show y ++ ";" ++ show x ++ "H")

width :: Int
width = 10
height :: Int
height = 10

type Board = [Pos]

glider :: Board
glider = [(4,2),(2,3),(4,3),(3,4),(4,4)]

showcells :: Board -> IO ()
showcells board = sequence_ [writeat p "X" | p <- b]


















